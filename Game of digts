Given a number N, find the smallest number K, such that product of digits of K is equal to N.
For each testcase, print K. If K is not possible, print -1.
Example:
Input:
2
12
5

Output:
26
5

Explanation:
Testcase 1: 26 is the smallest number, and product of 2 and 6 is 12.
Testcase 2: 5 is the smallest number which is itself equal to 5

// { Driver Code Starts
//Initial Template for C++

#include<bits/stdc++.h>
using namespace std;

string smallestK(long long n);

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
        long long n;
        cin>>n;
        cout<< smallestK(n) << endl;
	}
	return 1;
}
// } Driver Code Ends


//User function Template for C++


string smallestK(long long n)
{
    if (n >= 0 && n <= 9) 
        return std::to_string(n); 
        
    stack<int> digits; 
      
    for (int i=9; i>=2 && n > 1; i--) 
    { 
        while (n % i == 0) 
        { 
            digits.push(i); 
            n = n / i; 
        } 
    } 

    if (n != 1) 
        return "-1"; 
        
    long long int k = 0; 
    while (!digits.empty()) 
    { 
        k = k*10 + digits.top(); 
        digits.pop(); 
    } 
      
    return std::to_string(k); 
} 


