Given an array arr[] of size N and two elements x and y, use counter variables to find which element appears most in the array, x or y. If both elements have the same frequency, then return the smaller element.
Note:  We need to return the element, not its count.


CODE
// { Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

int majorityWins(int arr[], int n, int x, int y);
// Position this line where user code will be pasted.

int main() {

    int t; // Testcases
    cin >> t; // Input the testcases
    while (t--) // Until all testcases are exhausted
    {
        int n; // Size of array
        cin >> n; // Input the size
        int arr[n]; // Declaring array of size n
        for (int i = 0; i < n;
             i++) // Running a loop to input all elements of arr
            cin >> arr[i];

        int x, y; // declare x and y
        cin >> x >> y; // input x and y
        cout << majorityWins(arr, n, x, y)
             << endl; // calling the function that you complete
    }

    return 0;
}// } Driver Code Ends


// User function Template for C++

// Function to find element with more appearances between two elements in an
// array.
int majorityWins(int arr[], int n, int x, int y) {
    // code here
    int countX=0, countY=0;
    
    for(int i = 0; i < n; i++){
        if(arr[i] == x)
            countX++;
        if(arr[i] == y)
            countY++;
    }
    
    if(countX == countY)
        return std::min(x,y);
    
    if(countX > countY)
        return x;
    else
        return y;
        
}
