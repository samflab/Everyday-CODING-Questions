You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example 1
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]

Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]

CODE (C++)
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *temp= new ListNode;
        ListNode *p =l1, *q=l2, *curr=temp;
        int carry = 0;
        while(p != NULL || q != NULL)
        {
            int x=(p!= NULL)? p->val : 0;
            int y=(q!= NULL)? q->val : 0;
            int sum = x+y+carry;
            carry = sum/10;
            curr->next= new ListNode(sum % 10);
            curr=curr->next;
            if(p!=NULL)
                p=p->next;
            if(q!=NULL)
                q=q->next;
            
        }
        if(carry>0)
        {
            curr->next= new ListNode(carry);
        }
        return temp->next;
        
        
    }
};

CODE (JAVA)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode temp = new ListNode(0);
        ListNode p = l1, q = l2, curr = temp;
        int carry = 0;
        while(p != null || q != null)
        {
            int x= (p != null) ? p.val : 0;
            int y = (q != null) ? q.val : 0;
            int sum = x + y + carry;
            carry  = sum / 10;
            curr.next =  new ListNode(sum % 10);
            curr= curr.next;
            if(p != null)
                p= p.next;           
            if( q != null)
                q= q.next;
        }
        if(carry > 0)
        {
            curr.next = new ListNode(carry);
        }
        return temp.next;
    }
}
